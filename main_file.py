# -*- coding: utf-8 -*-
"""210613_FinalExam_ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CgUk5QGzZClcrJbz2SRnHJhF8YpBCSPf
"""

!pip install imblearn



"""# Libraries"""

import os
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
from imblearn.over_sampling import RandomOverSampler
import tensorflow as tf
from tensorflow.keras import layers, models

"""# Data Loading"""

import pandas as pd
import os

# Specify the folder where your CSV files are stored
data_path = '/content/drive/MyDrive/Lab Exam/har70plus'  # Update with the correct path

# List all CSV files in the directory
all_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]

# Separate the test file (501.csv) and the rest for training
test_file = '501.csv'
train_files = [f for f in all_files if f != test_file]

# Load the test dataset (501.csv)
test_data = pd.read_csv(os.path.join(data_path, test_file))

# Load the training datasets (all files except 501.csv)
train_data_list = [pd.read_csv(os.path.join(data_path, file)) for file in train_files]

# Combine all training data into a single DataFrame
train_data = pd.concat(train_data_list, ignore_index=True)

# Show the first few rows of the test and training datasets
print("Test Data (501.csv):")
print(test_data.head())

print("\nTraining Data:")
print(train_data.head())

"""# Normalizing Dataset"""

from sklearn.preprocessing import StandardScaler

# Normalize accelerometer data using Z-Score Standardization
accelerometer_columns = ['back_x', 'back_y', 'back_z', 'thigh_x', 'thigh_y', 'thigh_z']

# Initialize the StandardScaler
scaler = StandardScaler()

# Apply normalization to both training and testing data
train_data[accelerometer_columns] = scaler.fit_transform(train_data[accelerometer_columns])
test_data[accelerometer_columns] = scaler.transform(test_data[accelerometer_columns])

# Verify by printing the first few rows of the normalized data
print("\nNormalized Training Data:")
print(train_data[accelerometer_columns].head())

print("\nNormalized Test Data:")
print(test_data[accelerometer_columns].head())

"""# Normalization of Sensor data"""

# Normalize sensor data
sensor_columns = ['back_x', 'back_y', 'back_z', 'thigh_x', 'thigh_y', 'thigh_z']
scaler = MinMaxScaler()
train_data[sensor_columns] = scaler.fit_transform(train_data[sensor_columns])
test_data[sensor_columns] = scaler.transform(test_data[sensor_columns])

"""# Windowing to get features"""

# Function to segment data into non-overlapping windows
def segment_windows(data, window_size=50):
    windows = []
    labels = []
    for i in range(0, len(data) - window_size + 1, window_size):
        window = data.iloc[i:i + window_size]
        windows.append(window[sensor_columns].values)
        labels.append(window['label'].mode()[0])  # Most frequent label
    return np.array(windows), np.array(labels)

# Segment training and testing data
X_train, y_train = segment_windows(train_data)
X_test, y_test = segment_windows(test_data)
print("Shape of training data:", X_train.shape, y_train.shape)
print("Shape of testing data:", X_test.shape, y_test.shape)

# Oversample to handle class imbalance
ros = RandomOverSampler(random_state=42)
X_train_flat = X_train.reshape(X_train.shape[0], -1)  # Flatten for oversampling
X_train_resampled, y_train_resampled = ros.fit_resample(X_train_flat, y_train)
X_train_resampled = X_train_resampled.reshape(-1, 50, 6)  # Reshape back to original shape

# Check label distribution after oversampling
unique, counts = np.unique(y_train_resampled, return_counts=True)
print("Label distribution after oversampling:", dict(zip(unique, counts)))

"""# Model Building"""

# Define the CNN model
model = models.Sequential()

# 1st Conv1D Layer
model.add(layers.Conv1D(64, kernel_size=3, activation='relu', input_shape=(50, 6)))
model.add(layers.MaxPooling1D(pool_size=2))

# 2nd Conv1D Layer
model.add(layers.Conv1D(128, kernel_size=3, activation='relu'))
model.add(layers.MaxPooling1D(pool_size=2))

# 3rd Conv1D Layer
model.add(layers.Conv1D(256, kernel_size=3, activation='relu'))
model.add(layers.MaxPooling1D(pool_size=2))

# Flatten the output from convolutional layers
model.add(layers.Flatten())

# Dense Layer
model.add(layers.Dense(256, activation='relu'))

# Output Layer (softmax for multi-class classification)
model.add(layers.Dense(7, activation='softmax'))  # 8 classes (activities)

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',  # Use sparse categorical cross-entropy since labels are integers
              metrics=['accuracy'])

# Summary of the model
model.summary()

"""# Training"""

# Train the model
history = model.fit(
    X_train,         # Training data
    y_train,         # Training labels
    epochs=10,       # Number of epochs (adjust as needed)
    batch_size=32,   # Batch size (adjust based on your system's memory)
    validation_data=(X_test, y_test),  # Validation data for monitoring performance
    verbose=2        # Print progress for each epoch
)

# Save the model after training (optional)
model.save('activity_recognition_cnn.h5')

# Display training history (loss and accuracy plots)
import matplotlib.pyplot as plt

# Plot training & validation loss
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Plot training & validation accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

"""# Testing the model"""

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=2)

# Print the test results
print(f"Test Loss: {test_loss:.4f}")
print(f"Test Accuracy: {test_accuracy:.4f}")

"""# Evaluation matrices"""

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Evaluate the model on the test data
y_pred = model.predict(X_test)

# Convert predictions to class labels (using argmax for multi-class classification)
y_pred_classes = np.argmax(y_pred, axis=1)

# Print the classification report (precision, recall, f1-score)
print("Classification Report:")
print(classification_report(y_test, y_pred_classes, target_names=[str(i) for i in range(1, 8)]))

# Generate confusion matrix
cm = confusion_matrix(y_test, y_pred_classes)

# Plot confusion matrix using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=[str(i) for i in range(1, 8)], yticklabels=[str(i) for i in range(1, 9)])
plt.title('Confusion Matrix')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()

